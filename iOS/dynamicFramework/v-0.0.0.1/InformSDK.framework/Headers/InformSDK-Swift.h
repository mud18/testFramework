// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC9InformSDK12INFAdsPlayer")
@interface INFAdsPlayer : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP9InformSDK26INFSessionProviderDelegate_")
@protocol INFSessionProviderDelegate
- (void)playbackFailed;
@end

@class NSXMLParser;
@class NSError;
@class UIView;
@class UIImage;


/// /🎬 Playback Controller is responsible for parsing div tag, and providing video player to the application classes
SWIFT_CLASS("_TtC9InformSDK21INFPlaybackController")
@interface INFPlaybackController : NSObject <INFSessionProviderDelegate, NSXMLParserDelegate>
- (void)parser:(NSXMLParser * __nonnull)parser didStartElement:(NSString * __nonnull)elementName namespaceURI:(NSString * __nullable)namespaceURI qualifiedName:(NSString * __nullable)qName attributes:(NSDictionary<NSString *, NSString *> * __nonnull)attributeDict;
- (void)parser:(NSXMLParser * __nonnull)parser didEndElement:(NSString * __nonnull)elementName namespaceURI:(NSString * __nullable)namespaceURI qualifiedName:(NSString * __nullable)qName;
- (void)parser:(NSXMLParser * __nonnull)parser foundCharacters:(NSString * __nonnull)string;
- (void)parser:(NSXMLParser * __nonnull)parser parseErrorOccurred:(NSError * __nonnull)parseError;

/// Closure for Loads Widget Event, on calling it provides view with video. It also internally calls method for Web Services calling.
///
/// \param userInfo Optional dictionary for providing any required information
///
/// \param completion Completion Handler provides viewWithPlayer, isSuccess, userInfo
///
/// \returns  nil
- (void)loadWidget:(NSDictionary<NSString *, id> * __nullable)userInfo completion:(void (^ __nonnull)(UIView * __nonnull, BOOL, NSDictionary<NSString *, id> * __nullable, UIImage * __nullable))completion;
- (UIView * __nonnull)getView;
- (void)showError:(NSString * __nonnull)error;
- (void)playbackFailed;
@end



/// 🎥 Configurations Model Class
SWIFT_CLASS("_TtC9InformSDK23INFPlayerConfigurations")
@interface INFPlayerConfigurations : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Request controller class to control the request state as per its state
SWIFT_CLASS("_TtC9InformSDK20INFRequestController")
@interface INFRequestController : NSObject

/// To be called if UI activity is resumed
- (void)resume;

/// To be called if UI activity is cancelled
- (void)cancel;

/// Verify to check is request is cancelled - Returns: - Boolean, True if request is cancelled
- (BOOL)isCancelled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 🛠 Widget Manager is an Object Factory and will be responsible for -
///
/// <ul><li>Creation of Playback Controller Object</li><li>Maintaining all Widgets (assigning WidgetIds, maintaining live widgets)</li><li>Destructing all Widgets</li></ul>
SWIFT_CLASS("_TtC9InformSDK19INFSDKWidgetManager")
@interface INFSDKWidgetManager : NSObject
+ (INFSDKWidgetManager * __nonnull)sharedInstance;
+ (NSString * __nonnull)versionNumber;
@end



SWIFT_PROTOCOL("_TtP9InformSDK30INFVideoPlaybackEventsDelegate_")
@protocol INFVideoPlaybackEventsDelegate
- (BOOL)playEventAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (BOOL)pauseEventAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (BOOL)stopEventAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (BOOL)fullScreenEvent:(BOOL)isFullScreen error:(NSError * __nullable * __null_unspecified)error;
@end

@class NSURL;

SWIFT_PROTOCOL("_TtP9InformSDK28INFVideoPlayerEventsDelegate_")
@protocol INFVideoPlayerEventsDelegate
- (BOOL)playbackCompletedWithVideoURL:(NSURL * __nonnull)url error:(NSError * __nullable * __null_unspecified)error;
- (void)failedToPlayWithVideoURL:(NSURL * __nonnull)url;
- (void)playbackJumpedWithVideoURL:(NSURL * __nonnull)url;
- (void)playbackStalledWithVideoURL:(NSURL * __nonnull)url;
- (void)playerAccessLogsAvailableWithVideoURL:(NSURL * __nonnull)url;
- (void)playerErrorLogsAvailableWithVideoURL:(NSURL * __nonnull)url;
@end

enum INFViewPercent : NSInteger;

SWIFT_PROTOCOL("_TtP9InformSDK20INFVideoViewDelegate_")
@protocol INFVideoViewDelegate
- (void)currentVideoViewPercentWithVideoViewPercent:(enum INFViewPercent)videoView currentPlayTime:(double)currentPlayTime;
- (void)currentVideoViewHit:(NSInteger)hitDuration;
@end


SWIFT_CLASS("_TtC9InformSDK19INFSessionsProvider")
@interface INFSessionsProvider : NSObject <INFVideoViewDelegate, INFVideoPlayerEventsDelegate, INFVideoPlaybackEventsDelegate>

/// Starts Playback of Video
///
/// <ul><li>PlaybackFailed</li><li>PlayerNotInitialized</li><li>PlayerStatusUnkown</li><li>PlayerUnknownError - In case Error is not known and is not handled</li></ul>
/// \param error Different types of Playback Errors, depending on situation i.e., -
///
/// \returns  Void
- (BOOL)playVideoAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (BOOL)fullScreenEvent:(BOOL)isFullScreen error:(NSError * __nullable * __null_unspecified)error;
- (void)currentVideoViewPercentWithVideoViewPercent:(enum INFViewPercent)videoView currentPlayTime:(double)currentPlayTime;
- (void)currentVideoViewHit:(NSInteger)hitDuration;
- (BOOL)playbackCompletedWithVideoURL:(NSURL * __nonnull)url error:(NSError * __nullable * __null_unspecified)error;
- (void)failedToPlayWithVideoURL:(NSURL * __nonnull)url;
- (void)playbackJumpedWithVideoURL:(NSURL * __nonnull)url;
- (void)playbackStalledWithVideoURL:(NSURL * __nonnull)url;
- (void)playerAccessLogsAvailableWithVideoURL:(NSURL * __nonnull)url;
- (void)playerErrorLogsAvailableWithVideoURL:(NSURL * __nonnull)url;
- (BOOL)playEventAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (BOOL)pauseEventAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (BOOL)stopEventAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Model Class to maintain 🎞 video information
SWIFT_CLASS("_TtC9InformSDK8INFVideo")
@interface INFVideo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// 🎥 🛠 INFVideoPlayerManager is an Object Factory and will be responsible for -
///
/// <ul><li>Maintaining multiple AVPlayer instances for Videos</li><li>Maintaining multiple AVPlayer Instance for Ads</li></ul>
SWIFT_CLASS("_TtC9InformSDK21INFVideoPlayerManager")
@interface INFVideoPlayerManager : NSObject
@end



/// 🎥🔎 Class carries out following functionality -
///
/// <ul><li>Loading Video Player</li><li>Providing Handle for all Playback Events</li><li>Delegating videoView Events & videoPlayer Notification Events</li><li>Combines InfoOverlayView with Video Metadata ()</li><li>Combines UIControls for Playback Events</li></ul>
SWIFT_CLASS("_TtC9InformSDK18INFVideoPlayerView")
@interface INFVideoPlayerView : NSObject

/// Creates a Video Player View instance
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAddress:(NSString * __nonnull)address OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * __nullable)keyPath ofObject:(id __nullable)object change:(NSDictionary<NSString *, id> * __nullable)change context:(void * __null_unspecified)context;
- (void)updatePlayerViews:(UIView * __nonnull)viewWithPlayer isFullScreen:(BOOL)isFullScreen;
@end

@class NSCoder;


/// Main Video view holder
SWIFT_CLASS("_TtC9InformSDK12INFVideoView")
@interface INFVideoView : UIView
- (nullable instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)hideVideoThumnailView;
- (void)showLoading;
- (void)hideLoading;
- (void)showLoading:(NSString * __nonnull)title message:(NSString * __nonnull)message;
- (void)showError:(NSString * __nonnull)error;
- (void)hideError;
- (void)showVideoPlayer;
- (void)hideVideoPlayer;
- (void)setPlayer:(UIView * __nullable)videoPlayer;
@end



/// Video view controller allowing video view to transit to fullscreen mode
SWIFT_CLASS("_TtC9InformSDK22INFVideoViewController")
@interface INFVideoViewController : UIViewController

/// View controller view did load
- (void)viewDidLoad;

/// Function to control behaviour of view controller, acting like a toggle between full screen and inline screen
///
/// <ul><li>Parameter<ul><li>isFullScreenEvent : Boolean,</li></ul></li></ul>
- (void)showView:(BOOL)isFullScreenEvent;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;
- (UIViewController * __nullable)getViewController:(UIView * __nonnull)uiView;
@end



/// Enum for 🎞🔍 ⁒
///
/// <ul><li>FirstQuartile</li><li>MidPoint</li><li>ThirdQuartile</li><li>Complete</li></ul>
typedef SWIFT_ENUM(NSInteger, INFViewPercent) {
  INFViewPercentFirstQuartile = 25,
  INFViewPercentMidPoint = 50,
  INFViewPercentThirdQuartile = 75,
  INFViewPercentComplete = 100,
};


SWIFT_PROTOCOL("_TtP9InformSDK18VideoViewDelegates_")
@protocol VideoViewDelegates
- (void)videoViewPercent;
@end

#pragma clang diagnostic pop
